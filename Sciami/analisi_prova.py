import numpy as npfrom matplotlib import pyplot as pltimport pylabfrom scipy.optimize import curve_fitfrom scipy.stats import poissonfrom numba import jitfrom time import timeEpsilon_tel1= 0.573N_tel1 = 13.666 # numero di raggi cosmici al secondo attesi nel tel1N_tel2 = 32.13 # numero di raggi cosmici al secondo attesi nel tel2Epsilon_tel2 = 0.246# =============================================================================# Funzione per creare un istogramma degli eventi nel tempo# =============================================================================def istogramma_tempi(t, nbins, numero_figura, ref_istogramma, numero_acquisizione,save_fig = False, nome_figura=None, **kwargs_histo):    """        Parameters    ----------    t : array dei tempi    nbins : numero di bins per l'istogramma dei tempi    numero_figura : numero della figura in cui andrà l'istogramma    ref_istogramma : stringa da mettere nel titolo su che istogramma è    numero_acquisizione : numero di ore di acquisizione totale    Returns    -------    n_t : numero di conteggi in ogni bin    rate_t : rate dei conteggi per ogni bin di t        array che contiene il numero di eventi registrati in ogni bin temporale         diviso per la larghezza dell'intervallo temporale'    """         n_t, bins = np.histogram(t, nbins, **kwargs_histo)          Delta_t=bins[10]-bins[9]  # in secondi    rate_t=n_t/Delta_t #sistemati in modo che siano conteggi al secondo    n_tot = sum(n_t)        mean_bins = np.array([(bins[i]+bins[i+1])/2 for i in range(len(bins)-1)])            plt.figure(numero_figura)    ax=plt.subplot()    plt.title(f'Istogramma {ref_istogramma} - acquisizione di {numero_acquisizione:.1f} h')    plt.xlabel(f'Tempo [h] in bin di {Delta_t:.1f} s ')    plt.ylabel('Numero di eventi al secondo')    plt.xlim([-1, max(t)/3600+1])    plt.ylim([0, max(rate_t)+2])    text = plt.text(0.05, 0.85, f"$\Delta t$ bin = {Delta_t:.1f} s \n{n_tot:.0f} eventi", transform=ax.transAxes)    text.set_bbox(dict(facecolor='red', alpha=0.5))        plt.bar( mean_bins/3600, rate_t, width = Delta_t/3600, align='center', label='Dati' , zorder=1, capsize=2)    if save_fig:       plt.savefig("Grafici/"+nome_figura)        print("Numero totale conteggi", ref_istogramma, f"= {n_tot} in $\Delta t$ = {max(t)/3600:.1f} h : rate = {n_tot/max(t):.4f} cps")    return n_t, rate_t, Delta_tdef istogramma_tc(t, nbins, numero_figura, ref_istogramma, numero_acquisizione,save_fig = False, nome_figura=None, **kwargs_histo):    """        Parameters    ----------    t : array dei tempi    nbins : numero di bins per l'istogramma dei tempi    numero_figura : numero della figura in cui andrà l'istogramma    ref_istogramma : stringa da mettere nel titolo su che istogramma è    numero_acquisizione : numero di ore di acquisizione totale    Returns    -------    n_t : numero di conteggi in ogni bin    rate_t : rate dei conteggi per ogni bin di t        array che contiene il numero di eventi registrati in ogni bin temporale         diviso per la larghezza dell'intervallo temporale'    """         n_t, bins = np.histogram(t, nbins, **kwargs_histo)          Delta_t=bins[10]-bins[9]  # in secondi    rate_t=n_t/Delta_t #sistemati in modo che siano conteggi al secondo    n_tot = sum(n_t)        mean_bins = np.array([(bins[i]+bins[i+1])/2 for i in range(len(bins)-1)])            plt.figure(numero_figura)    ax=plt.subplot()    plt.title(f'Istogramma {ref_istogramma} - acquisizione di {numero_acquisizione:.1f} h')    plt.xlabel('Tempo [h]')    plt.ylabel('Numero di eventi per bin')    plt.xlim([-0.1, max(t)/3600])    text = plt.text(0.75, 0.88, f"$\Delta t$ bin = {Delta_t:.1f} s \n{n_tot:.0f} eventi totali",  transform=ax.transAxes)    text.set_bbox(dict(facecolor='red', alpha=0.5))        plt.bar( mean_bins/3600, n_t, width = Delta_t/3600, align='center', label='Dati' , zorder=1, capsize=2)    if save_fig:       plt.savefig("Grafici/"+nome_figura)        print("Numero totale conteggi", ref_istogramma, f"= {n_tot} in $\Delta t$ = {max(t)/3600:.1f} h : rate = {n_tot/max(t):.4f} cps")    return n_t, rate_t, Delta_t# =============================================================================# Istogramma pdf conteggi al secondo e analisi # =============================================================================def fit_function(n, mu, A):    return A*poisson.pmf(n, mu)def analisi_cps(counts, Delta_t, numero_figura, ref_istogramma, numero_acquisizione, save_fig = False, nome_figura=None):    """        Parameters    ----------    counts : array di conteggi        contiene i conteggi restituiti dall'istogramma per i tempi    Delta_t : float        intervallo temporale corrispondente ai conteggi: rate = counts/delta_t.    numero_figura : numero della figura che verrà creata    ref_istogramma : specifiche dell'istogramma nel titolo della figura     numero_acquisizione : float         numero di ore di acquisizione totale    save_fig : bool, optional        se True, la figura viene salvata. The default is False.    nome_figura : string, optional        nome del file in cui verrà salvata la figura. The default is None.                Returns    -------    mu_cps : float        media della poissoniana uscita dal fit divisa per delta_t: dà la media del rate    sigma_mu_cps : float         errore sulla media della poissoniana uscita dal fit divisa per delta_t: dà la sigma della media del rate.    """    print(f"\n------Stima di pdf {ref_istogramma}-------")        # stima di media per confrontarla con risultati fit    mean_exp = np.mean(counts)    std_exp = np.sqrt(sum((counts-mean_exp)**2/len(counts)))        # nota: anche mean e std hanno una loro varianza (sono statistiche)    print(f"Media dei counts = {mean_exp:.1f} pm {std_exp:.1f} ")    width_bin=5    bins_semiinteri = np.arange(0, int(max(counts))+1, width_bin) - 0.5    occorrenze_rate, bins = np.histogram(counts, bins_semiinteri)    # preparazione dei dati per il fit: prendo la media dei bins (intera!)    mean_bins = np.array([(bins[i]+bins[i+1])/2 for i in range(len(bins)-1)])        indici = occorrenze_rate>0    x = mean_bins[indici]    y=occorrenze_rate[indici]    sigma_y = np.sqrt(y)  # errore su y: assumo conteggi poissoniani    occorrenze_totali = sum(y)    # y = y/float(occorrenze_totali)  # normalizzo y    # sigma_y = sigma_y/float(occorrenze_totali) # normalizzo sigma y    # fit della poissoniana realizzato con curve fit    popt, pcov = curve_fit(fit_function, x, y, sigma = sigma_y, p0=[np.mean(counts), occorrenze_totali*0.02])        # estraggo i dati del fit    mu_fit=popt[0]    sigma_mu_fit = np.sqrt(pcov.diagonal())[0]    var_fit = np.sqrt(mu_fit)  # la varianza di una poissoniana è uguale a mu    sigma_var_fit = sigma_mu_fit/np.sqrt(mu_fit)/2    mu_cps = mu_fit/Delta_t    sigma_mu_cps = sigma_mu_fit/Delta_t    print(f"Media della poissoniana fittata:  = {mu_fit:.3f} pm {sigma_mu_fit:.3f}")    print(f"Varianza della poissoniana fittata:  = {var_fit:.3f} pm {sigma_var_fit:.3f}")    print(f"Media della poissoniana divisa per Delta t: rate = {mu_cps:.3f} pm {sigma_mu_cps:.3f}")        # Grafico istogramma conteggi al secondo: nel grafico divido le x per delta_t        plt.figure(numero_figura)    ax=plt.subplot()    plt.title(f'Istogramma {ref_istogramma} - acquisizione di {numero_acquisizione:.0f} h')    plt.ylabel('Occorrenze in ogni bin')    plt.xlabel(f'Conteggi in $\Delta t$ = {Delta_t:.1f} s')    #plt.xlim([-3, max(counts)+1])    #plt.ylim([0,max(y)*1.3])        t = plt.text(0.02, 0.66,                  f"$\overline{{x}}$ = {mean_exp:.1f} \n"                 +f"$\sigma_{{x}}$ = {std_exp:.2f} \n"                 +f"$\mu$ = {mu_fit:.1f} $\pm$ {sigma_mu_fit:.1f} \n"                 +f"$\sigma$ = {var_fit:.2f} $\pm$ {sigma_var_fit:.2f}\n"                 +f"cps = {mu_cps:.2f} $\pm$ {sigma_mu_cps:.2f}", transform=ax.transAxes)    t.set_bbox(dict(facecolor='red', alpha=0.5))        plt.bar( x, y, width = width_bin, align='center', label='Dati' , zorder=1, capsize=2)    plt.errorbar(x, y, yerr = sigma_y, fmt='.',  zorder=3, capsize=2, color='k')    x_plot = np.arange(min(x)-1, max(x)+1, 1)    plt.plot(x_plot,fit_function(x_plot, *popt), ls = '-', label='Fit', color='red', zorder=2)    #plt.legend(loc='best')        if save_fig:        plt.savefig("Grafici/"+nome_figura)        return mu_cps, sigma_mu_cps# ====================================================================================# Istogramma delle differenze di tempo tra un evento e l'altro dello stesso telescopio# ====================================================================================def fit_function_expo(t, A, l):    return A*np.exp(-t*l)def analisi_delta_t(t, numero_figura, ref_istogramma, numero_acquisizione, save_fig = False, nome_figura=None):    t_next = np.array([t[i+1] for i in range(len(t)-1)])    t_before = t[:-1]    Delta_t = t_next-t_before        print(f"\n------Stima di {ref_istogramma}-------")    # stima di media per confrontarla con risultato fit    mean_exp = np.mean(Delta_t)    std_exp = np.std(Delta_t)    print(f"Media del Delta t = {mean_exp:.4f} pm {std_exp:.4f} ")        counts, bins = np.histogram(Delta_t, 100)    # fit esponenziale     mean_bins = np.array([(bins[i]+bins[i+1])/2 for i in range(len(bins)-1)])    indici=counts>0    x=mean_bins[indici]    y=counts[indici]    x = x[1:]    y = y[1:]        sigma_y = np.sqrt(y)  # errore su y: assumo conteggi poissoniani        popt, pcov = curve_fit(fit_function_expo, x, y, sigma = sigma_y, p0=[y[1], 1/mean_exp])        lambda_fit = popt[1]    sigma_lambda_fit = np.sqrt(pcov[1][1])        tau_fit = 1/lambda_fit    sigma_tau_fit = sigma_lambda_fit/lambda_fit**2        print("Lambda del fit ", ref_istogramma, f"= {lambda_fit:.3f} pm {sigma_lambda_fit:.3f} eventi al secondo")    print("Tau del fit" , ref_istogramma,f"= {tau_fit:.4f} pm {sigma_tau_fit:.4f} s")        # Grafico    plt.figure(numero_figura)    ax=plt.subplot()    plt.title(f'Istogramma {ref_istogramma} - acquisizione di {numero_acquisizione:.1f} h')    plt.ylabel(f'Occorrenze in bin di {(bins[4]-bins[3]):.2f} s')    plt.xlabel('Delta tempo tra eventi [s]')    plt.xlim([-0.05, 1.3])    plt.ylim([1, y[0]*2])    plt.yscale('log')        text = plt.text(0.66, 0.7,                  f"$\overline{{\Delta t}}$= {mean_exp*1e3:.1f} ms \n"                 +f"$\sigma_{{\Delta t}}$ = {std_exp*1e3:.1f} ms\n "                 +f"$\\tau$ = {tau_fit*1e3:.1f} $\pm$ {sigma_tau_fit*1e3:.1f} ms\n"                 +f"$\lambda$ = {lambda_fit:.2f} $\pm$ {sigma_lambda_fit:.2f} cps", transform=ax.transAxes)    text.set_bbox(dict(facecolor='red', alpha=0.5))        plt.bar( x, y, width = bins[3]-bins[2], align='center', label='Dati' , zorder=1, capsize=2)    plt.errorbar(x, y, yerr = sigma_y, fmt='.',  zorder=3, capsize=2, color='k')    x_plot = np.linspace(min(x), 1.5, 1000)    y_plot = fit_function_expo(x_plot,*popt)    plt.plot(x_plot, y_plot, ls='-', label = 'Fit', color = 'red', zorder = 2)    if save_fig:       plt.savefig("Grafici/"+ nome_figura)       # =============================================================================# Istogramma delle differenze di tempo tra i due telescopi# =============================================================================def analisi_dt_12(Delta_t12, numero_figura,ref_istogramma, numero_acquisizione,save_fig = False, nome_figura=None):    # zoom sui primi 1000 ns    indices = Delta_t12<700e-9    Delta_t = Delta_t12[indices]*1e9 # dati in n secondi        bins=np.arange(0, max(Delta_t))    counts, bins = np.histogram(Delta_t, 100)        mean_bins = np.array([(bins[i]+bins[i+1])/2 for i in range(len(bins)-1)])    width_bins = bins[4]-bins[3]    x = mean_bins    y = counts        plt.figure(numero_figura)    ax=plt.subplot()    plt.title(f'Istogramma {ref_istogramma} - acquisizione di {numero_acquisizione:.1f} h')    plt.ylabel(f'Occorrenze in bin di {width_bins:.0f} ns')    plt.xlabel('Delta tempo tra eventi telescopi diversi [ns]')        plt.bar( x, y, width = width_bins, align='center', label='Dati' , zorder=1, capsize=2)    if save_fig:       plt.savefig("Grafici/"+ nome_figura+"_ns")        # grafico di tutti i delta t        print(f"\n------Stima di {ref_istogramma}-------")    # stima di media per confrontarla con risultato fit    mean_exp = np.mean(Delta_t12)    std_exp = np.std(Delta_t12)    print(f"Media del Delta t = {mean_exp:.4f} pm {std_exp:.4f} ")        counts, bins = np.histogram(Delta_t12, 100)        mean_bins = np.array([(bins[i]+bins[i+1])/2 for i in range(len(bins)-1)])    width_bins = bins[4]-bins[3]        indici=counts>0    x=mean_bins[indici]    y=counts[indici]    x = x[1:]    y = y[1:]    sigma_y=np.sqrt(y)        popt, pcov = curve_fit(fit_function_expo, x, y, sigma = sigma_y, p0=[y[1], 1/mean_exp])    lambda_fit = popt[1]    sigma_lambda_fit = np.sqrt(pcov[1][1])        tau_fit = 1/lambda_fit    sigma_tau_fit = sigma_lambda_fit/lambda_fit**2        print("Lambda del fit ", ref_istogramma, f"= {lambda_fit:.3f} pm {sigma_lambda_fit:.3f} eventi al secondo")    print("Tau del fit" , ref_istogramma,f"= {tau_fit:.4f} pm {sigma_tau_fit:.4f} s")            plt.figure(numero_figura+1)    ax=plt.subplot()    plt.title(f'Istogramma {ref_istogramma} - acquisizione di {numero_acquisizione:.1f} h')    plt.ylabel(f'Occorrenze in bin di {width_bins:.2f} s')    plt.xlabel('Delta tempo tra eventi telescopi diversi [s]')    plt.yscale('log')    plt.xlim([-0.05, 0.8])    plt.ylim([0.1, y[0]*2])        text = plt.text(0.64, 0.7,                  f"$\overline{{\Delta t}}$= {mean_exp*1e3:.1f} ms \n"                 +f"$\sigma_{{\Delta t}}$ = {std_exp*1e3:.1f} ms\n "                 +f"$\\tau$ = {tau_fit*1e3:.1f} $\pm$ {sigma_tau_fit*1e3:.1f} ms\n"                 +f"$\lambda$ = {lambda_fit:.2f} $\pm$ {sigma_lambda_fit:.2f} cps", transform=ax.transAxes)    text.set_bbox(dict(facecolor='red', alpha=0.5))            plt.bar( x, y, width = width_bins, align='center', label='Dati' , zorder=1, capsize=2)    plt.errorbar(x, y, yerr = sigma_y, fmt='.',  zorder=3, capsize=2, color='k')    x_plot = np.linspace(min(x), 1.5, 1000)    y_plot = fit_function_expo(x_plot,*popt)    plt.plot(x_plot, y_plot, ls='-', label = 'Fit', color = 'red', zorder = 2)        if save_fig:       plt.savefig("Grafici/"+ nome_figura+"_long")# =============================================================================# Prima acquisizione di prova# =============================================================================t0 = time()n_acquis=0nbins = 3000nome_file= 'sciami_291122_prova5't1= np.load('Dati_fixed/'+nome_file+'_t1_fixed.npy')t2= np.load('Dati_fixed/'+nome_file+'_t2_fixed.npy')tc= np.load('Dati_fixed/'+nome_file+'_tc_fixed.npy')Delta_t12= np.load('Dati_fixed/'+nome_file+'_Delta_t12_fixed.npy')t1.tofile('Dati_fixed/'+nome_file+'_t1_fixed.dat')t2.tofile('Dati_fixed/'+nome_file+'_t2_fixed.dat')tc.tofile('Dati_fixed/'+nome_file+'_tc_fixed.dat')Delta_t12.tofile('Dati_fixed/'+nome_file+'_Delta_t12_fixed.dat')"""length = 10000t1=t1[:length]t2=t2[:length]tc=tc[:length]Delta_t12=Delta_t12[:length]"""durata_acquisizione = max([max(t2), max(t1)])/3600 # oren_t1, rate_t1 , Delta_t1= istogramma_tempi(t1, nbins, n_acquis+1, ref_istogramma="telescopio 1", numero_acquisizione = durata_acquisizione,save_fig=True, nome_figura=f"ist_tel1_{durata_acquisizione:.0f}h")n_t2, rate_t2, Delta_t2 = istogramma_tempi(t2, nbins, n_acquis+2, ref_istogramma="telescopio 2", numero_acquisizione = durata_acquisizione,save_fig=True, nome_figura=f"ist_tel2_{durata_acquisizione:.0f}h")n_tc, rate_tc, Delta_tc= istogramma_tc(tc, 100, n_acquis+3, ref_istogramma="coincidenze", numero_acquisizione = durata_acquisizione,save_fig=True, nome_figura=f"ist_coinc_{durata_acquisizione:.0f}h")# Fit dell'istogramma dei conteggi di eventi per unità di tempo per i due canalirate1, drate1 = analisi_cps(n_t1, Delta_t1, numero_figura= n_acquis+4, ref_istogramma="conteggi telescopio 1", numero_acquisizione = durata_acquisizione, save_fig=True, nome_figura=f"ist_poiss_tel1_{durata_acquisizione:.0f}h")rate2, drate2 = analisi_cps(n_t2,Delta_t2, numero_figura= n_acquis+5, ref_istogramma="conteggi telescopio 2", numero_acquisizione = durata_acquisizione, save_fig=True, nome_figura=f"ist_poiss_tel2_{durata_acquisizione:.0f}h")# Fit delle differenze di tempo tra un evento e l'altroanalisi_delta_t(t1, n_acquis+6, ref_istogramma=r"$\Delta t$ telescopio 1", save_fig=True, nome_figura=f"ist_dtempi_tel1_{durata_acquisizione:.0f}h", numero_acquisizione = durata_acquisizione)analisi_delta_t(t2, n_acquis+7, ref_istogramma=r"$\Delta t$ telescopio 2", save_fig=True, nome_figura=f"ist_dtempi_tel2_{durata_acquisizione:.0f}h", numero_acquisizione = durata_acquisizione)analisi_dt_12(Delta_t12, n_acquis+8, ref_istogramma = r"$\Delta t$ telescopi", save_fig=True, nome_figura=f"ist_dtempi_tel12_{durata_acquisizione:.0f}h", numero_acquisizione=durata_acquisizione)print(f"Tempo di run: {time()-t0} s")plt.show()