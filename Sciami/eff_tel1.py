#!/usr/bin/env python3# -*- coding: utf-8 -*-"""Created on Tue Nov 22 14:55:16 2022@author: IreneCelestino"""import numpy as npfrom matplotlib import pyplot as pltimport pylabfrom scipy.optimize import curve_fit# =============================================================================# EFFICIENZA PMT3# =============================================================================#CONTEGGI 1&2 e 1&2&3Al1=1550 #VAl2=1380 #V# Nota: per le misure da 1795 ([0:9] sono le prime) in su abbiamo messo le alimentazioni a 1560 (Al1) e 1440 (Al2)Al3 =np.array([1800, 1750, 1700, 1650, 1675, 1725, 1775, 1785, 1795, 1730, 1740, 1750, 1760, 1770, 1720, 1780, 1710, 1800])cps1= 1e2*np.array([173.87, 173.48, 175.00, 178.17, 175.74, 176.05, 176.89, 177.43, 178.33, 198.19, 198.93, 198.97, 199.41, 197.91, 197.75, 200.97, 202.65, 201.65])cps2 =1e2*np.array([196.10, 188.75, 188.45, 184.64, 177.41, 171.54, 161.45, 156.68, 158.13, 480.80, 492.31, 480.58, 480.10, 477.16, 465.70, 482.55, 496.23, 521.27])cps3 =1e2*np.array([46842.33, 22744.46, 4559.60, 1806.53, 2656.09, 9261.29, 23158.77, 27344.50, 34298.64, 2951.42, 3634.04, 4533.52, 5696.01, 7566.12, 2476.52, 9595.44, 2085.32, 14972.62])cps12 =1e2*np.array([7.74, 7.39, 7.85, 7.59, 7.80, 7.74, 7.55, 7.53, 7.53, 9.29, 9.89, 9.16, 9.65, 9.38, 9.74, 9.34, 10.02, 9.41])cps123 =1e2*np.array([4.88, 4.14, 3.06, 2.28, 2.72, 3.36, 4.29, 4.44, 4.83, 3.70, 3.89, 3.99, 4.09, 4.32, 3.17, 4.40, 3.38, 4.58])Al3_n=Al3[9:]Al3=Al3[0:9]cps1_n=cps1[9:]cps1=cps1[0:9]cps2_n=cps2[9:]cps2=cps2[0:9]cps3_n=cps3[9:]cps3=cps3[0:9]cps12_n=cps12[9:]cps12=cps12[0:9]cps123_n=cps123[9:]cps123=cps123[0:9]indices=np.argsort(Al3)Al3=Al3[indices]cps1=cps1[indices]cps2=cps2[indices]cps3=cps3[indices]cps12=cps12[indices]cps123=cps123[indices]epsilon3=cps123/cps12dcps1=np.sqrt(cps1)dcps2=np.sqrt(cps2)dcps3=np.sqrt(cps3)dcps12=np.sqrt(cps12)dcps123=np.sqrt(cps123*(1-epsilon3)) depsilon3=dcps123/cps12indices=np.argsort(Al3_n)Al3_n=Al3_n[indices]cps1_n=cps1_n[indices]cps2_n=cps2_n[indices]cps3_n=cps3_n[indices]cps12_n=cps12_n[indices]cps123_n=cps123_n[indices]epsilon3_n=cps123_n/cps12_ndcps1_n=np.sqrt(cps1_n)dcps2_n=np.sqrt(cps2_n)dcps3_n=np.sqrt(cps3_n)dcps12_n=np.sqrt(cps12_n)dcps123_n=np.sqrt(cps123_n*(1-epsilon3_n)) depsilon3_n=dcps123_n/cps12_n#Stima delle coincidenze doppie accidentali per le prime alimentazioniR2=np.mean(cps2)R1=np.mean(cps1)w=50e-9wmin=2e-9Dt=100cp12_acc=R1*R2*Dt*(2*w-2*wmin)cps12_acc_mean=cp12_acc/Dtprint("\nCoincidenze 1&2 accidentali al secondo: ", cps12_acc_mean)cps12_acc=cps1*cps2*(2*w-2*wmin)/Dtepsilon3_corr=cps123/(cps12 - cps12_acc)cps12_acc_n=cps1_n*cps2_n*(2*w-2*wmin)/Dtepsilon3_corr_n=cps123_n/(cps12_n - cps12_acc_n)plt.figure(1)plt.title("Efficienza di PM3 (TEL1) vs tensione di alimentazione")plt.xlabel("Tensione di alimentazione [V]")plt.ylabel("Efficienza")plt.errorbar(Al3, epsilon3, depsilon3, marker='.', ls='--',capsize=5,             zorder=2, label='e3')plt.errorbar(Al3_n, epsilon3_n, depsilon3_n, marker='.', ls='--',capsize=5,             zorder=2, label='e3_n')plt.grid(linestyle=':',alpha=0.7)plt.errorbar(Al3, epsilon3_corr, marker='.', ls='--',capsize=5,             zorder=2, label='e3 corr')plt.errorbar(Al3_n, epsilon3_corr_n, marker='.', ls='--',capsize=5,             zorder=2, label='e3_n corr')plt.legend(loc='best')plt.figure(2)plt.title("Conteggi al secondo dei PM (TEL1) vs tensione di alimentazione")plt.xlabel("Tensione di alimentazione [V]")plt.ylabel("Conteggi al secondo [cps]")plt.yscale('log')plt.errorbar(Al3, cps3*1e-2, marker='.', ls='--', capsize=2,             zorder=2, label='PM3')plt.errorbar(Al3_n, cps3_n*1e-2, marker='.', ls='--', capsize=2,             zorder=2, label='PM3_n')plt.figure(5)plt.title("Efficienza vs Conteggi al secondo in singola (TEL1)")plt.ylabel("Efficienza")plt.xlabel("Conteggi al secondo [cps]")plt.grid(linestyle=':',alpha=0.7)plt.legend(loc='best')plt.errorbar(cps3_n*1e-2, epsilon3_n, depsilon3_n,  marker='.', ls='--', capsize=2,             zorder=2, label='PM3')# =============================================================================# EFFICIENZA PMT2# =============================================================================#CONTEGGI 1&3 e 1&2&3Al1=1550 #VAl3=1795 #V# da 1300 in poi fatte con AL1=1475 e Al3 = 1800Al2 =np.array([1380, 1400, 1450, 1500, 1550, 1600, 1410, 1430, 1460, 1480, 1440, 1300, 1350, 1390])cps1 =1e2*np.array([181.24, 266.21, 184.39, 181.99, 182.60, 181.69, 182.52, 181.69, 182.61, 179.95, 185.02, 46.84, 46.80, 46.36])cps2 =1e2*np.array([207.96, 266.21, 673.58, 2828.62, 8210.11, 14262.23, 267.50, 401.89, 925.06, 2079.90, 586.55, 36.10, 95.06, 167.07])cps3 =1e2*np.array([13031.50,13529.35 , 13544.69, 13372.22, 12887.51, 13113.46, 13530.06, 13368.02, 13523.81, 13476.94, 13498.42, 14937.62, 15003.96, 14700.55])cps13 =1e2*np.array([4.89, 4.92, 5.59, 5.63, 5.10, 4.86, 4.84, 5.36, 5.03, 4.88, 4.95, 4.72, 4.71, 4.41])cps123 =1e2*np.array([4.09, 4.30, 5.19, 5.27, 4.96, 4.58, 4.31, 4.85, 4.69, 4.67, 4.56, 2.11, 3.36, 3.76])indices=np.argsort(Al2)Al2=Al2[indices]cps1=cps1[indices]cps2=cps2[indices]cps3=cps3[indices]cps13=cps13[indices]cps123=cps123[indices]epsilon2=cps123/cps13dcps1=np.sqrt(cps1)dcps2=np.sqrt(cps2)dcps3=np.sqrt(cps3)dcps13=np.sqrt(cps13)dcps123=np.sqrt(cps123*(1-epsilon2)) ## Var = cps13*epsilon*(1-epsilon)depsilon2=dcps123/cps13#Stima delle coincidenze doppie accidentaliR1=np.mean(cps1)R3=np.mean(cps3)w=50e-9wmin=2e-9Dt=100cp13_acc=R1*R3*Dt*(2*w-2*wmin)cps13_acc_mean=cp13_acc/Dtprint("\nCoincidenze 1&3 accidentali al secondo: ", cps13_acc_mean)cps13_acc=cps1*cps3*(2*w-2*wmin)/Dtepsilon2_corr=cps123/(cps13 - cps13_acc)plt.figure(3)plt.title("Efficienza di PM2(TEL1) vs tensione di alimentazione")plt.xlabel("Tensione di alimentazione [V]")plt.ylabel("Efficienza")plt.errorbar(Al2, epsilon2, depsilon2, marker='.', ls='--',capsize=5,             zorder=2, label='e2')plt.errorbar(Al2, epsilon2_corr, marker='.', ls='--',capsize=5,             zorder=2, label='e2 corr')plt.grid(linestyle=':',alpha=0.7)plt.legend(loc='best')plt.figure(2)plt.title("Conteggi al secondo dei PM(TEL1) vs tensione di alimentazione")plt.xlabel("Tensione di alimentazione [V]")plt.ylabel("Conteggi al secondo [cps]")plt.yscale('log')plt.errorbar(Al2, cps2*1e-2, marker='.', ls='--', capsize=2,             zorder=2, label='PM2')plt.grid(linestyle=':',alpha=0.7)plt.legend(loc='best')plt.figure(5)plt.title("Efficienza vs Conteggi al secondo in singola (TEL1)")plt.ylabel("Efficienza")plt.xlabel("Conteggi al secondo [cps]")plt.grid(linestyle=':',alpha=0.7)plt.legend(loc='best')plt.errorbar(cps2*1e-2, epsilon2, depsilon2,  marker='.', ls='--', capsize=2,             zorder=2, label='PM2')# =============================================================================# EFFICIENZA PMT1# =============================================================================#CONTEGGI 2&3 e 1&2&3Al3=1795 #VAl2=1440 #VAl1 =np.array([1550, 1600, 1650, 1700, 1580, 1620, 1570, 1560, 1500, 1450, 1400, 1425, 1475, 1525])cps1 =1e2*np.array([175.52, 361.73, 1377.05, 17143.58, 268.91, 529.88, 232.08, 202.78, 73.42, 29.30, 11.24, 18.05, 47.42, 109.73])cps2 =1e2*np.array([511.78, 509.37, 502.30, 510.59, 492.98, 492.84, 502.11, 495.07, 348.02, 334.64, 337.19, 345.21, 343.22, 342.05])cps3 =1e2*np.array([13734.33, 13797.10, 13814.65, 13306.15, 13369.76, 13289.59, 13250.94, 13278.46, 15079.05, 14875.55, 14869.44, 14986.23, 14978.53, 14828.75])cps23 =1e2*np.array([7.49, 7.31, 7.25, 6.95, 6.96, 7.29, 8.02, 7.56, 6.83, 6.73, 6.58, 6.97, 7.46, 7.08])cps123 =1e2*np.array([4.51, 4.72, 4.99, 4.43, 4.62, 4.58, 5.17, 4.91, 4.39, 4.05, 2.72, 3.69, 4.77, 4.61])indices=np.argsort(Al1)Al1=Al1[indices]cps1=cps1[indices]cps2=cps2[indices]cps3=cps3[indices]cps23=cps23[indices]cps123=cps123[indices]epsilon1=cps123/cps23dcps1=np.sqrt(cps1)dcps2=np.sqrt(cps2)dcps3=np.sqrt(cps3)dcps23=np.sqrt(cps23)dcps123=np.sqrt(cps123*(1-epsilon1)) depsilon1=dcps123/cps23#Stima delle coincidenze doppie accidentaliR2=np.mean(cps2)R3=np.mean(cps3)w=50e-9wmin=2e-9Dt=100cps23_acc=R2*R3/Dt*(2*w-2*wmin)print("\nCoincidenze 2&3 accidentali al secondo: ", cps23_acc)cps23_acc=cps2*cps3*(2*w-2*wmin)/Dtepsilon1_corr=cps123/(cps23 - cps23_acc)plt.figure(4)plt.title("Efficienza di PM1(TEL1) vs tensione di alimentazione")plt.xlabel("Tensione di alimentazione [V]")plt.ylabel("Efficienza")plt.errorbar(Al1, epsilon1, depsilon1, marker='.', ls='--',capsize=5,             zorder=2, label='e1')plt.errorbar(Al1, epsilon1_corr, marker='.', ls='--',capsize=5,             zorder=2, label='e1 corr')plt.grid(linestyle=':',alpha=0.7)plt.legend(loc='best')plt.figure(2)plt.title("Conteggi al secondo dei PM(TEL1) vs tensione di alimentazione")plt.xlabel("Tensione di alimentazione [V]")plt.ylabel("Conteggi al secondo [cps]")plt.yscale('log')plt.errorbar(Al1, cps1*1e-2, dcps1*1e-2,marker='.', ls='--', capsize=2,             zorder=2, label='PM1')plt.grid(linestyle=':',alpha=0.7)plt.legend(loc='best')plt.figure(5)plt.title("Efficienza vs Conteggi al secondo in singola (TEL1)")plt.ylabel("Efficienza")plt.xlabel("Conteggi al secondo [cps]")plt.grid(linestyle=':',alpha=0.7)plt.errorbar(cps1*1e-2, epsilon1, depsilon1,  marker='.', ls='--', capsize=2,             zorder=2, label='PM1')plt.legend(loc='best')plt.xscale('log')# =============================================================================# Studio del punto di lavoro del telescopio 1# =============================================================================Al1=1475Al2=1440Al3=1800cps1=np.array([4709, 4602, 3311])cps2=np.array([33891, 33871, 35209])cps3=np.array([1477550, 1458583, 1453225])dcps1=np.sqrt(cps1)dcps2=np.sqrt(cps2)dcps3=np.sqrt(cps3)#epsilon 2cps13=474cps123=452epsilon2=cps123/cps13#epsilon 1cps23=742cps123=446epsilon1=cps123/cps23#epsilon 3cps12=722cps123=380epsilon3=cps123/cps12dcps12=np.sqrt(cps12)dcps123=np.sqrt(cps123*(1-epsilon3)) depsilon3=dcps123/cps12print(f"Efficienze: \n PMT1 = {epsilon1} \n PMT2 = {epsilon2} \n PMT3 = {epsilon3} \n")