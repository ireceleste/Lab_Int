import numpy as npfrom matplotlib import pyplot as pltimport pylabfrom scipy.optimize import curve_fit# =============================================================================# EFFICIENZA PMT2# =============================================================================#CONTEGGI 1&3 e 1&2&3Al1=1790 #VAl3=1742 #VAl2 =np.array([1763, 1792, 1773, 1751, 1730, 1716, 1701, 1685, 1799, 1648, 1670])cps1 =1e2*np.array([136.26, 139.63, 140.09, 137.16, 138.82, 138.86, 138.21, 139.27, 139.63, 69.00, 71.04])cps2 =1e2*np.array([242.62, 497.02, 535.30, 261.77, 207.73, 177.74, 155.22, 132.27, 2093.23, 36.35, 64.37])cps3 =1e2*np.array([228.97, 221.31, 226.42, 224.38, 223.46, 222.08, 221.88, 222.48, 221.03, 135.30, 136.18])cps13 =1e2*np.array([11.52, 11.60, 12.39, 11.60, 11.55, 11.39, 12.46, 11.40, 11.43, 9.39, 9.60])cps123 =1e2*np.array([10.49, 10.90, 11.57, 10.66, 10.26, 10.10, 10.86, 9.43, 10.90, 3.94, 6.16])indices=np.argsort(Al2)Al2=Al2[indices]cps1=cps1[indices]cps2=cps2[indices]cps3=cps3[indices]cps13=cps13[indices]cps123=cps123[indices]epsilon2=cps123/cps13dcps1=np.sqrt(cps1)dcps2=np.sqrt(cps2)dcps3=np.sqrt(cps3)dcps13=np.sqrt(cps13)dcps123=np.sqrt(cps123*(1-epsilon2)) ## Var = cps13*epsilon*(1-epsilon)depsilon2=dcps123/cps13#Stima delle coincidenze doppie accidentaliR1=np.mean(cps1)R3=np.mean(cps3)w=50e-9wmin=2e-9Dt=100cps13_acc=R1*R3/Dt*(2*w-2*wmin)print("\nCoincidenze 1&3 accidentali in 100 secondi: ", cps13_acc)cps13_acc=cps1*cps3*(2*w-2*wmin)/Dtdcps13_acc=np.sqrt((dcps1*cps3)**2+ (dcps3*cps1)**2)*(2*w-2*wmin)/Dtepsilon2_corr=cps123/(cps13 - cps13_acc)depsilon2_corr = np.sqrt((dcps123/(cps13 - cps13_acc))**2+(dcps13_acc*cps123/(cps13 - cps13_acc)**2)**2)plt.figure(1)plt.title("Efficienza di PM2 (TEL2) vs tensione di alimentazione")plt.xlabel("Tensione di alimentazione [V]")plt.ylabel("Efficienza")plt.errorbar(Al2, epsilon2, depsilon2, marker='.', ls='--',capsize=5,             zorder=2, label='e2')plt.grid(linestyle=':',alpha=0.7)plt.legend(loc='best')plt.savefig("Grafici_eff_tel2/e2_vs_V.pdf")plt.figure(2)plt.title("Conteggi al secondo dei PM (TEL2) vs tensione di alimentazione")plt.xlabel("Tensione di alimentazione [V]")plt.ylabel("Conteggi al secondo [cps]")plt.yscale('log')plt.errorbar(Al2, cps2*1e-2, dcps2*1e-2, marker='.', ls='--', capsize=2,             zorder=2, label='PM2')plt.grid(linestyle=':',alpha=0.7)plt.legend(loc='best')plt.figure(5)plt.title("Efficienza vs Conteggi al secondo in singola (TEL2)")plt.ylabel("Efficienza")plt.xlabel("Conteggi al secondo [cps]")plt.grid(linestyle=':',alpha=0.7)plt.legend(loc='best')plt.errorbar(cps2*1e-2, epsilon2, depsilon2,  marker='.', ls='--', capsize=2,             zorder=2, label='PM2')# =============================================================================# EFFICIENZA PMT1# =============================================================================#CONTEGGI 2&3 e 1&2&3Al3=1742 #VAl2=1799 #V# =============================================================================# Queste non ci piacciono: i conteggi in singola oscillano all'aumentare dell# Al1 =np.array([1789, 1798, 1771, 1762, 1751, 1740, 1781])# cps1 =1e2*np.array([215.63, 273.37, 143.81, 124,38, 108.27, 93.93, 179.38])# cps2 =1e2*np.array([645.38, 687.94, 701.75, 684.45, 683.55, 686.74, 699.01])# cps3 =1e2*np.array([204.45, 206.41, 204.16, 207.08, 208.59, 208.02, 210.32])# cps23 =1e2*np.array([20.49, 19.79, 19.97, 19.87, 20.25, 19.77, 19.45])# cps123 =1e2*np.array([10.99, 11.10, 10.86, 10.42, 10.43, 9.91, 10.82])# # # =============================================================================Al1 =np.array([1649, 1702, 1750, 1795, 1776, 1727, 1676, 1712, 1740, 1689])cps1 =np.array([2351, 6151, 12071, 29077, 18011, 8457, 3515, 6882, 10374, 4666])cps2 =np.array([71347, 76347, 75879, 73892, 73538, 72127, 71663, 70179, 70389, 68294])cps3 =np.array([37736, 36168, 35264, 34098, 33337, 31116, 28393, 27336, 26723, 25868])cps123 =np.array([413, 866, 1041, 1075, 1043, 947, 562, 851, 1013, 707])cps23 =np.array([2069, 2047, 1963, 1958, 1962, 1988, 1928, 1999, 1927, 1936])indices=np.argsort(Al1)Al1=Al1[indices]cps1=cps1[indices]cps2=cps2[indices]cps3=cps3[indices]cps23=cps23[indices]cps123=cps123[indices]epsilon1=cps123/cps23dcps1=np.sqrt(cps1)dcps2=np.sqrt(cps2)dcps3=np.sqrt(cps3)dcps23=np.sqrt(cps23)dcps123=np.sqrt(cps123*(1-epsilon1)) depsilon1=dcps123/cps23#Stima delle coincidenze doppie accidentaliR2=np.mean(cps2)R3=np.mean(cps3)w=50e-9wmin=2e-9Dt=100cps23_acc=R2*R3*(2*w-2*wmin)/Dtprint("\nCoincidenze 2&3 accidentali in 100 secondi: ", cps23_acc)cps23_acc=cps2*cps3*(2*w-2*wmin)/Dtepsilon1_corr=cps123/(cps23 - cps23_acc)plt.figure(3)plt.title("Efficienza di PM1 (TEL2) vs tensione di alimentazione")plt.xlabel("Tensione di alimentazione [V]")plt.ylabel("Efficienza")plt.errorbar(Al1, epsilon1,depsilon1, marker='.', ls='--',capsize=5,             zorder=2, label='e1')plt.grid(linestyle=':',alpha=0.7)plt.legend(loc='best')plt.savefig("Grafici_eff_tel2/e1_vs_V.pdf")plt.figure(2)plt.title("Conteggi al secondo dei PM vs tensione di alimentazione")plt.xlabel("Tensione di alimentazione [V]")plt.ylabel("Conteggi al secondo [cps]")plt.yscale('log')plt.errorbar(Al1, cps1*1e-2, dcps2*1e-2,marker='.', ls='--', capsize=2,             zorder=2, label='PM1')plt.grid(linestyle=':',alpha=0.7)plt.legend(loc='best')plt.figure(5)plt.title("Efficienza vs Conteggi al secondo in singola (TEL2)")plt.ylabel("Efficienza")plt.xlabel("Conteggi al secondo [cps]")plt.grid(linestyle=':',alpha=0.7)plt.errorbar(cps1*1e-2, epsilon1, depsilon1,  marker='.', ls='--', capsize=2,             zorder=2, label='PM1')plt.legend(loc='best')plt.xscale('log')# =============================================================================# EFFICIENZA PMT3# =============================================================================#CONTEGGI 1&2 e 1&2&3Al1=1739 #VAl2=1800 #VAl3 =np.array([1800, 1750, 1700, 1652, 1674, 1728, 1776, 1714, 1741, 1761, 1691])cps1 =np.array([7161, 7217, 7135, 7224, 7116, 7250, 7118, 7126, 7029, 7237, 7081])cps2 =np.array([61070, 60165, 61132, 69138, 68532, 69511, 67805, 68596, 68077, 66834, 67410])cps3 =np.array([419882, 100735, 11717, 5681, 8434, 32772, 254473, 16555, 62246, 152123, 10627])cps123 =np.array([943, 922, 888, 733, 823, 911, 893, 948, 859, 954, 882])cps12 =np.array([1638, 1562, 1598, 1597, 1594, 1645, 1562, 1649, 1498, 1620, 1618])indices=np.argsort(Al3)Al3=Al3[indices]cps1=cps1[indices]cps2=cps2[indices]cps3=cps3[indices]cps12=cps12[indices]cps123=cps123[indices]epsilon3=cps123/cps12dcps1=np.sqrt(cps1)dcps2=np.sqrt(cps2)dcps3=np.sqrt(cps3)dcps12=np.sqrt(cps12)dcps123=np.sqrt(cps123*(1-epsilon3)) depsilon3=dcps123/cps12#Stima delle coincidenze doppie accidentaliR2=np.mean(cps2)R1=np.mean(cps1)w=50e-9wmin=2e-9Dt=100cps12_acc=R2*R1*(2*w-2*wmin)/Dtprint("\nCoincidenze 1&2 accidentali in 100 secondi: ", cps12_acc)cps12_acc=cps1*cps2*(2*w-2*wmin)/Dtepsilon3_corr=cps123/(cps12 - cps12_acc)plt.figure(4)plt.title("Efficienza di PM3 (TEL2) vs tensione di alimentazione")plt.xlabel("Tensione di alimentazione [V]")plt.ylabel("Efficienza")plt.errorbar(Al3, epsilon3,depsilon3, marker='.', ls='--',capsize=5,             zorder=2, label='e3')plt.grid(linestyle=':',alpha=0.7)plt.legend(loc='best')plt.savefig("Grafici_eff_tel2/e3_vs_V.pdf")plt.figure(2)plt.title("Conteggi al secondo dei PM vs tensione di alimentazione")plt.xlabel("Tensione di alimentazione [V]")plt.ylabel("Conteggi al secondo [cps]")plt.yscale('log')plt.errorbar(Al3, cps3*1e-2, dcps3*1e-2,marker='.', ls='--', capsize=2,             zorder=2, label='PM3')plt.grid(linestyle=':',alpha=0.7)plt.legend(loc='best')plt.savefig("Grafici_eff_tel2/counts_vs_V.pdf")plt.figure(5)plt.title("Efficienza vs Conteggi al secondo in singola (TEL2)")plt.ylabel("Efficienza")plt.xlabel("Conteggi al secondo [cps]")plt.grid(linestyle=':',alpha=0.7)plt.errorbar(cps3*1e-2, epsilon3, depsilon3,  marker='.', ls='--', capsize=2,             zorder=2, label='PM3')plt.legend(loc='best')plt.xscale('log')plt.savefig("Grafici_eff_tel2/counts_vs_rate.pdf")# =============================================================================# Studio del punto di lavoro del telescopio 2# =============================================================================Al1=1740Al2=1750Al3=1711cps1=np.array([7001, 7061, 7032])cps2=np.array([18192, 18068, 18235])cps3=np.array([15646, 12937, 34845])dcps1=np.sqrt(cps1)dcps2=np.sqrt(cps2)dcps3=np.sqrt(cps3)#epsilon 2cps13=871cps123=807epsilon2=cps123/cps13#epsilon 1cps23=1771cps123=825epsilon1=cps123/cps23#epsilon 3cps12=1491cps123=832epsilon3=cps123/cps12dcps12=np.sqrt(cps12)dcps123=np.sqrt(cps123*(1-epsilon3)) depsilon3=dcps123/cps12print(f"Efficienze: \n PMT1 = {epsilon1} \n PMT2 = {epsilon2} \n PMT3 = {epsilon3} \n")# =============================================================================# EFFICIENZA PMT2 al variare delle soglie - prima misura al plateau# =============================================================================#CONTEGGI 1&3 e 1&2&3Al1=1740Al2=1750Al3=1711soglie1 =np.array([-30.4, -40.4, -49.9, -60.3, -70.6])soglie2 =np.array([-30.6, -40.1, -50.1, -60.8, -69.4])soglie = (soglie1+soglie2)/2cps1 =np.array([7596, 4774, 3327, 2215, 1521])cps2 =np.array([24824, 24465, 24595, 24931, 25084])cps3 =np.array([26379, 11277, 8351, 6211, 4977])cps13 =np.array([924, 717, 530, 359, 188])cps123 =np.array([873, 689, 501, 334, 174])indices=np.argsort(soglie)soglie=soglie[indices]cps1=cps1[indices]cps2=cps2[indices]cps3=cps3[indices]cps13=cps13[indices]cps123=cps123[indices]epsilon2=cps123/cps13dcps1=np.sqrt(cps1)dcps2=np.sqrt(cps2)dcps3=np.sqrt(cps3)dcps13=np.sqrt(cps13)dcps123=np.sqrt(cps123*(1-epsilon2)) ## Var = cps13*epsilon*(1-epsilon)depsilon2=dcps123/cps13plt.figure(6)plt.title("Efficienza di PM2 (TEL2) vs soglie dei discriminatori 1 e 3")plt.xlabel("Tensione di soglia [mV]")plt.ylabel("Efficienza")plt.errorbar(soglie, epsilon2, depsilon2, marker='.', ls='',capsize=5,             zorder=2, label='Al2=1750 V')plt.grid(linestyle=':',alpha=0.7)plt.legend(loc='best')# =============================================================================# EFFICIENZA PMT2 al variare delle soglie - prima misura in fase di salita# =============================================================================#CONTEGGI 1&3 e 1&2&3Al1=1740Al2=1682Al3=1711soglie1 =np.array([-30.5, -41, -49.7, -60.0, -70])soglie2 =np.array([-30.7, -41, -50.7, -61.6, -70])soglie = (soglie1+soglie2)/2cps1 =np.array([7075, 4541, 3288, 2228, 1371])cps2 =np.array([8049, 8702, 8164, 8003, 8463])cps3 =np.array([77069, 18154, 9584, 6686, 4383])cps13 =np.array([966, 707, 533, 333, 190])cps123 =np.array([676, 515, 399, 264, 163])indices=np.argsort(soglie)soglie=soglie[indices]cps1=cps1[indices]cps2=cps2[indices]cps3=cps3[indices]cps13=cps13[indices]cps123=cps123[indices]epsilon2=cps123/cps13dcps1=np.sqrt(cps1)dcps2=np.sqrt(cps2)dcps3=np.sqrt(cps3)dcps13=np.sqrt(cps13)dcps123=np.sqrt(cps123*(1-epsilon2)) ## Var = cps13*epsilon*(1-epsilon)depsilon2=dcps123/cps13plt.figure(6)plt.title("Efficienza di PM2 (TEL2) vs soglie dei discriminatori 1 e 3")plt.xlabel("Tensione di soglia [mV]")plt.ylabel("Efficienza")plt.errorbar(soglie, epsilon2, depsilon2, marker='.', ls='',capsize=5,             zorder=2, label='Al2=1682 V')plt.grid(linestyle=':',alpha=0.7)plt.legend(loc='best')plt.savefig("Grafici_eff_tel2/e2_vs_soglia.pdf")