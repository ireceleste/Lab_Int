import numpy as npfrom matplotlib import pyplot as pltimport pylabfrom scipy.optimize import curve_fit# =============================================================================# FREQUENZA DI TRIGGER VS SOGLIA# PM7 alimentato a 1770 V # =============================================================================soglie = np.array([-40, -30, -20, -15, -10, -50, -60])  # mVmin_freq = np.array([90, 160, 290, 370, 750, 30, 25])  # Hzmax_freq = np.array([120, 240, 400, 530, 900, 50, 44])  # Hzfreq=(max_freq+min_freq)/2  # Hzplt.figure(1)plt.title("Frequenza di trigger vs soglia")plt.xlabel("Tensione di soglia [mV]")plt.ylabel("Frequenza di trigger [Hz]")plt.errorbar(soglie, freq, marker='x', ls='', capsize=2,             zorder=2, color='k')plt.grid(linestyle=':',alpha=0.7)plt.savefig("Grafici/ftrigger_vs_soglia.png")print("Tensione di soglia [mV] & Frequenza di trigger minima [Hz]& Frequenza di trigger massima [Hz] & Frequenza di trigger media [Hz]")for i in range(len(soglie)):    print(f"{soglie[i]:.1f}& {min_freq[i]:.0f}& {max_freq[i]:.0f}& {freq[i]:.0f}")# =============================================================================# Frequenza di trigger e conteggi al variare di alimentazione# Tensione di trigger -21 mV# Tensione di soglia discriminatore -40 mV# =============================================================================alimentazione = np.array([1600, 1700, 1800, 1900, 1850, 1750 , 1975])*1e-3 #kVf_trigger = np.array([1,36, 400, 24.5e3, 1e3, 160, 320e3 ]) #Hzf_conteggi = np.array([1.8,29.2, 398.4, 42.915e3, 1.083e3, 151.8, 335.155e3 ]) #conteggi/ssigma_f = np.sqrt(f_conteggi)plt.figure(2)plt.title("Conteggi al secondo PM7 vs tensione di alimentazione")plt.xlabel("Tensione di alimentazione [kV]")plt.ylabel("Conteggi al secondo [Hz]")plt.yscale('log')plt.errorbar(alimentazione, (f_conteggi), sigma_f, marker='.', ls='', capsize=2,             zorder=2, color='k')plt.grid(linestyle=':',alpha=0.7)#plt.plot(alimentazione, f_trigger, '+')plt.savefig("Grafici/conteggi_vs_alimentazione_PM7.png")# =============================================================================# CONTEGGI IN SINGOLA, DOPPIA, TRIPLA + efficienza del secondo PM # Tengo Al1 e Al3 ferme, mentre vario Al2# =============================================================================#CONTEGGI 1&3 e 1&2&3Al1=1740 #VAl3=1670 #VAl2=np.array([1750, 1685, 1695, 1710, 1780, 1730, 1810, 1850, 1870, 1600, 1550, 1575, 1500, 1900, 1520, 1540, 1650, 1625 ])cps1=np.array([96.72, 98.52, 94.57, 97.07, 94.16, 95.76, 99.49 , 97.47, 99.45, 97.00, 94.84, 96.15, 92.03, 96.48, 96.02, 96.16,94.67, 92.38 ])cps2=np.array([244.38, 123.89, 140.37, 163.54, 368.03, 204.74, 710.80, 1311.06, 1551.69, 39.92, 16.34, 26.63, 6.98, 1858.19, 9.62, 13.67, 82.12, 58.13])cps3=np.array([99.45, 98.10, 94.57, 94.21, 93.69, 93.90, 95.81, 92.57, 91.47, 92.44, 91.39, 90.78, 89.62, 90.39, 89.76, 88.80, 89.03, 88.87])cps13=np.array([6.72, 7.37, 7.18, 7.06, 7.00, 6.94, 7.37, 7.23, 6.87, 7.07, 6.43, 6.76, 7.55, 7.21, 6.67, 6.84, 6.85, 7.08])cps123=np.array([6.65, 7.09, 6.98, 6.87, 6.88, 6.84, 7.29, 7.15, 6.79, 6.23, 3.64, 4.89, 1.71, 7.13, 2.40, 3.37, 6.59, 6.59])indices=np.argsort(Al2)Al2=Al2[indices]cps1=cps1[indices]cps2=cps2[indices]cps3=cps3[indices]cps13=cps13[indices]cps123=cps123[indices]epsilon2=cps123/cps13dcps1=np.sqrt(cps1)dcps2=np.sqrt(cps2)dcps3=np.sqrt(cps3)dcps13=np.sqrt(cps13)dcps123=np.sqrt(cps123*(1-epsilon2)) ## Var = cps13*epsilon*(1-epsilon)depsilon2=dcps123/cps13#Stima delle coincidenze doppie accidentaliR1=np.mean(cps1)R3=np.mean(cps3)w=50e-9wmin=2e-9Dt=100cps13_acc=R1*R3*Dt*(2*w-2*wmin)print("\nCoincidenze 1&3 accidentali: ", cps13_acc)print("\nPM & $V_2$ & singola & $1 \& 3$  &  $1\&2\& 3$ & $\epsilon_2$\\\ \n \hline")for i in range(len(Al2)):    s1= f"PM7 & & ${cps1[i]:.1f} \pm {dcps1[i]:.1f}$ & & & \\\ \n"    s2= f"PM5 & {Al2[i]:.0f} & ${cps2[i]:.1f} \pm {dcps2[i]:.1f}$"    s2+=f"& ${cps13[i]:.1f} $  & ${cps123[i]:.1f} \pm {dcps123[i]:.1f}$ "    s2+=f"& ${epsilon2[i]:.2f} \pm {depsilon2[i]:.2f}$\\\ \n"    s3= f"PM4 & & ${cps3[i]:.1f} \pm {dcps3[i]:.1f}$ & & & \\\ "    print( "\hline \n"+s1+ s2+s3)print("\n \n")print("EFFICIENZA 2", 7.09/7.37, np.sqrt(7.09)/7.37)#print("\nConteggi per secondo cps & $\sigma =\sqrt{cps}$ \\\ \n \hline")for i in range(len(Al2)):    s=f"{cps1[i]:.1f} &  {dcps1[i]:.1f} \\\ "    #print("\hline \n"+s)mcps1=np.mean(cps1)sqrtmcps1=np.mean(dcps1)scps1=(max(cps1)-min(cps1))/2#print(f"Misura di cps1: {mcps1:.1f}, radice di media {sqrtmcps1:.1f} , std= {scps1:.1f}$" )mcps3=np.mean(cps3)sqrtmcps3=np.mean(dcps3)scps3=(max(cps3)-min(cps3))/2#print(f"Misura di cps3: {mcps3:.1f}, radice di media {sqrtmcps3:.1f} , std= {scps3:.1f}$" )plt.figure(3)plt.yscale('log')plt.errorbar(Al2, cps2, np.sqrt(cps2), marker='.', ls='--', capsize=2,             zorder=2, label='PM5')plt.grid(linestyle=':',alpha=0.7)#plt.savefig("Grafici/conteggi_vs_alimentazione_PM5.png")plt.figure(4)plt.title("Efficienza di PM5 vs tensione di alimentazione")plt.xlabel("Tensione di alimentazione [kV]")plt.ylabel("Efficienza")plt.errorbar(Al2, epsilon2, depsilon2, marker='.', ls='', capsize=2,             zorder=2, color='k')plt.grid(linestyle=':',alpha=0.7)plt.savefig("Grafici/epsilon_vs_alimentazione_PM5.png")# =============================================================================# CONTEGGI IN SINGOLA, DOPPIA, TRIPLA del terzo PM # Tengo Al1 e Al2 ferme, mentre vario Al3# =============================================================================#CONTEGGI 1&3 e 1&2&3Al1=1740 #VAl2=1685 #VAl3=np.array([1670, 1710, 1700, 1750, 1850, 1900,1600, 1550, 1640])cps1=np.array([100.1, 99.3, 95.10, 98.04, 94.84, 95.70, 96.51, 95.28, 94.44 ])cps2=np.array([126.3, 127.1, 125.74, 126.94, 124.86, 126.41, 125.35, 126.08, 127.11])cps3=np.array([88.1, 171.5, 166.51, 828.51, 192482.28, 244425.18, 10.71, 2.30, 37.28])cps12=np.array([11.8, 9.3, 10.61, 11.19, 10.43, 11.56, 11.70, 11.23, 11.43])cps123=np.array([7.9, 6.6, 7.43, 8.29, 8.01, 8.73, 2.92, 0.47, 5.64])indices=np.argsort(Al3)Al3=Al3[indices]cps1=cps1[indices]cps2=cps2[indices]cps3=cps3[indices]cps12=cps12[indices]cps123=cps123[indices]epsilon3=cps123/cps12dcps1=np.sqrt(cps1)dcps2=np.sqrt(cps2)dcps3=np.sqrt(cps3)dcps12=np.sqrt(cps12)dcps123=np.sqrt(cps123*(1-epsilon3)) depsilon3=dcps123/cps12print("\nPM & $V_3$ & singola & $1 \& 2$ \\\ \n \hline")for i in range(len(Al3)):    s1= f"PM7 & & ${cps1[i]:.1f} \pm {dcps1[i]:.1f}$ &  & & \\\ \n"    s2= f"PM5 & {Al3[i]:.0f} & ${cps2[i]:.1f} \pm {dcps2[i]:.1f}$ & ${cps12[i]:.1f} $  & ${cps123[i]:.1f} \pm {dcps123[i]:.1f}$"    s2+=f"& ${epsilon3[i]:.2f} \pm {depsilon3[i]:.2f}$\\\ \n"    s3= f"PM4 & & ${cps3[i]:.1f} \pm {dcps3[i]:.1f}$ &  & &\\\ "    print( "\hline \n"+s1+ s2+s3)print("EFFICIENZA 3", 7.90/11.80, np.sqrt(7.90)/11.80)plt.figure(3)plt.yscale('log')plt.errorbar(Al3, cps3, np.sqrt(cps3), marker='.', ls='--', capsize=2,             zorder=2, label='PM4')plt.grid(linestyle=':',alpha=0.7)#plt.savefig("Grafici/conteggi_vs_alimentazione_PM4.png")plt.figure(6)plt.title("Efficienza di PM4 vs tensione di alimentazione")plt.xlabel("Tensione di alimentazione [V]")plt.ylabel("Efficienza")plt.errorbar(Al3, epsilon3, depsilon3, marker='.', ls='', capsize=2,             zorder=2, color='k')plt.grid(linestyle=':',alpha=0.7)plt.savefig("Grafici/epsilon_vs_alimentazione_PM4.png")print(epsilon3)# =============================================================================# CONTEGGI IN SINGOLA, DOPPIA, TRIPLA del primo PM # Tengo Al1 e Al2 ferme, mentre vario Al3# =============================================================================#CONTEGGI 2&3 e 1&2&3Al3=1670 #VAl2=1685 #VAl1=np.array([1740, 1670, 1850, 1900, 1800])cps1=np.array([94.25, 6.73, 800.52, 27723.27, 1038.97])cps2=np.array([126.30, 125.00, 125.46, 124.18, 118.91])cps3=np.array([87.01, 88.38, 87.08, 89.37, 81.80])cps23=np.array([14.98, 14.78, 14.50, 14.93, 14.38])cps123=np.array([6.23, 1.67, 7.88, 7.71, 8.30])indices=np.argsort(Al1)Al1=Al1[indices]cps1=cps1[indices]cps2=cps2[indices]cps3=cps3[indices]cps23=cps23[indices]cps123=cps123[indices]epsilon1=cps123/cps23dcps1=np.sqrt(cps1)dcps2=np.sqrt(cps2)dcps3=np.sqrt(cps3)dcps23=np.sqrt(cps23)dcps123=np.sqrt(cps123*(1-epsilon1)) depsilon1=dcps123/cps23print("\nPM & $V_1$ & singola & $2 \& 3$  & 1\& 2 \& 3$ \\\ \n \hline")for i in range(len(Al1)):    s1= f"PM7 & & ${cps1[i]:.1f} \pm {dcps1[i]:.1f}$ &  & &\\\ \n"    s2= f"PM5 & {Al1[i]:.0f} & ${cps2[i]:.1f} \pm {dcps2[i]:.1f}$ & ${cps23[i]:.1f}$  & ${cps123[i]:.1f} \pm {dcps123[i]:.1f}$ "    s2+=f"& ${epsilon1[i]:.2f} \pm {depsilon1[i]:.2f}$\\\ \n"    s3= f"PM4 & & ${cps3[i]:.1f} \pm {dcps3[i]:.1f}$ &  & &\\\ "    print( "\hline \n"+s1+ s2+s3)    print("EFFICIENZA 1", 6.23/14.98, np.sqrt(6.23)/14.98)plt.figure(3)plt.title("Conteggi al secondo dei PM vs tensione di alimentazione")plt.xlabel("Tensione di alimentazione [V]")plt.ylabel("Conteggi al secondo [cps]")plt.yscale('log')plt.errorbar(Al1, cps1, np.sqrt(cps1), marker='.', ls='--', capsize=2,             zorder=2, label='PM7')plt.grid(linestyle=':',alpha=0.7)plt.legend(loc='best')plt.savefig("Grafici/conteggi_vs_alimentazione_tutti.png")plt.figure(7)plt.title("Efficienza di PM7 vs tensione di alimentazione")plt.xlabel("Tensione di alimentazione [V]")plt.ylabel("Efficienza")plt.errorbar(Al1, epsilon1, depsilon1, marker='.', ls='', capsize=2,             zorder=2, color='k')plt.grid(linestyle=':',alpha=0.7)plt.savefig("Grafici/epsilon_vs_alimentazione_PM7.png")# =============================================================================# CONTEGGI IN SINGOLA, DOPPIA, TRIPLA del secondo PM # Cambio solo al1 e al3# =============================================================================#CONTEGGI 1&3 e 1&2&3Al1=np.array([1650, 1700, 1750, 1800, 1850, 1900, 1950, 1775, 1825, 1790, 1625 ]) #=Al3Al2=1685cps1=np.array([6.63, 23.23, 117.72, 338.60, 1602.24, 56058.43, 240242.24, 280.35, 568.23, 335.56, 4.68])cps2=np.array([124.91, 123.82, 124.72, 127.66, 119.95, 117.79, 119.31, 118.28, 118.24, 117.00, 119.57])cps3=np.array([51.18, 163.17, 788.53, 64017.00, 192670.49, 242814.49, 264277.56, 10758.84, 134161.77, 35392.29, 21.07])cps13=np.array([1.57, 4.99, 8.80, 15.78, 93.89, 3577.31, 16377.54, 10.52, 31.22, 13.19, 0.9])cps123=np.array([1.49, 4.81, 8.36, 9.76, 10.24, 10.10, 11.15, 9.07, 9.54, 9.12, 0.88])indices=np.argsort(Al1)Al1=Al1[indices]cps1=cps1[indices]cps2=cps2[indices]cps3=cps3[indices]cps13=cps13[indices]cps123=cps123[indices]epsilon2=cps123/cps13dcps1=np.sqrt(cps1)dcps2=np.sqrt(cps2)dcps3=np.sqrt(cps3)dcps13=np.sqrt(cps13)dcps123=np.sqrt(cps123*(1-epsilon2))depsilon2=dcps123/cps13w=50e-9wmin=2e-9Dt=100cps13_acc=cps1*cps3*Dt*(2*w-2*wmin)epsilon2_corr=cps123/(cps13 - cps13_acc)print("\nTabella coincidenze accidentali")for i in range(len(Al1)):    s1= f"PM7 & & ${cps1[i]:.1f} \pm {dcps1[i]:.1f}$ & & & & \\\ \n"    s2= f"PM5 & {Al1[i]:.0f} & ${cps2[i]:.1f} \pm {dcps2[i]:.1f}$"    s2+=f"& ${cps13[i]:.1f} $  & ${cps13_acc[i]:.3f}$ "    s2+=f"& ${cps123[i]:.1f} \pm {dcps123[i]:.1f}$"    s2+=f"& ${epsilon2[i]:.4f} \pm {depsilon2[i]:.4f}$ \\\ \n"    s3= f"PM4 & & ${cps3[i]:.1f} \pm {dcps3[i]:.1f}$ & & & & \\\ "    print( "\hline \n"+s1+ s2+s3)plt.figure(8)plt.title("Efficienza di PM5 vs tensione di alimentazione di PM4 e PM7")plt.xlabel("Tensione di alimentazione [V]")plt.ylabel("Efficienza")plt.errorbar(Al1, epsilon2, depsilon2, marker='.', ls='', capsize=2,             zorder=2, label='Efficienza', color='k')#plt.errorbar(Al1, epsilon2_corr, marker='.', ls='', capsize=2,#             zorder=2, label='Efficienza corretta')plt.grid(linestyle=':',alpha=0.7)#plt.legend(loc='best')plt.savefig("Grafici/epsilon_vs_alimentazione_altri.png")plt.show()